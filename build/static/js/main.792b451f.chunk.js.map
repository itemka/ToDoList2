{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","Button.js","AddNewItemForm.js","API.js","Redux/Reduser.jsx","TodoList.js","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["TodoListTask","state","editMode","taskTitle","_this","props","task","title","onIsDoneChanged","event","changeStatus","id","currentTarget","checked","updateTitle","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","tasksId","render","containerCssClass","status","react_default","a","createElement","className","concat","type","onChange","onBlur","autoFocus","onClick","priority","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","e","changeTodoLIstTitle","deleteListTask","Button","Fragment","buttonCallBack","AddNewItemForm","error","onAddItemClick","newText","addItem","onTitleChanged","onKeyPress","placeholder","src_Button","bind","Object","assertThisInitialized","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","newTitle","post","get","TodoListId","delete","taskId","objects","put","todolistId","ADD_TASK","addTaskThunkCreator","newTask","dispatch","then","response","addTask","data","item","setTasksThunkCreator","setTasks","items","deleteListTaskThunkCreator","todoListId","deleteTaskThunkCreator","changeTodoListTitleACThunkCreator","changeTodoListTitleAC","changeObjectThunkCreator","obj","getState","todolists","find","forEach","el","_objectSpread","changeObj","initialState","buttonTitle","ToDoListsReducer","arguments","length","undefined","action","todoLists","newTodoList","toConsumableArray","filter","listTask","TodoList","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveState","stateAsString","JSON","stringify","localStorage","setItem","nextTaskId","todoListTitle","newFilterValue","restoreState","addNewTask","changeObjectAPI","changeTask","isDone","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","t","src_TodoListFooter","newTasksTitileRef","createRef","ConnectTodoList","connect","App","nextTodoListId","addTodoList","addTodoListThunkCreator","setTodoListsThunkCreator","_addTodoList","_restoreState","getItem","parse","tl","src_TodoList","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","Reducer","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.792b451f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    state = {\n        editMode: false,\n        taskTitle: this.props.task.title,\n    };\n\n    onIsDoneChanged = event => {\n        this.props.changeStatus(this.props.task.id, event.currentTarget.checked ? 2 : 0);\n    };\n\n    updateTitle = event => {\n        /*this.props.changeTitle(this.props.task.id, event.currentTarget.value);*/\n        this.setState({taskTitle: event.currentTarget.value});\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.taskTitle);\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.tasksId, this.props.task.id)\n    };\n\n    render = () => {\n        let containerCssClass = this.props.task.status === 2 ? \"todoList-task done\" : \"todoList-task\";\n        return (\n            <div className={`${containerCssClass} todoList-task`}>\n                <input type=\"checkbox\" checked={this.props.task.status} onChange={this.onIsDoneChanged}/>{'   '}\n                <span className={`taskText`}>\n                    {this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode}\n                                 onChange={this.updateTitle}\n                                 autoFocus={true}\n                                 value={this.state.taskTitle}/>\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }\n                </span>{'   '}\n                <span className={`priority`}> (priority: {this.props.task.priority})</span>\n                <button className={`button`} onClick={this.onDeleteTask}>X</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(task => <TodoListTask key={task.id} task={task} tasksId={this.props.tasksId}\n                                                                       changeStatus={this.props.changeStatus}\n                                                                       changeTitle={this.props.changeTitle}\n                                                                       deleteTask={this.props.deleteTask}/>);\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;","import React from 'react';\nimport './App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div className={`center`}>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>Hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>Show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    changeTitle = e => {\n        this.setState({title: e.currentTarget.value})\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTodoLIstTitle(this.state.title);\n    };\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n    render = () => {\n        return (\n            <div>\n                <div>\n                    <button className={`button`} onClick={this.props.deleteListTask}>X</button>\n                </div>\n                <div>\n                    <h3 className={`todoList-header_title center`}>\n                        {this.state.editMode\n                            ? <input onBlur={this.deactivateEditMode}\n                                     onChange={this.changeTitle}\n                                     type=\"text\"\n                                     autoFocus={true}\n                                     value={this.state.title}/>\n                            : <span onClick={this.activateEditMode}>{this.props.title}</span>}\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\n\nconst Button = (props) => {\n    return (\n        <>\n            <button className={`button`} onClick={props.buttonCallBack}>{props.title}</button>\n        </>\n    )\n};\n\nexport default Button;","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n        return (\n            <div className={`todoList-newTaskForm center`}>\n                <input className={`classNameForInput`} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <Button buttonCallBack={this.onAddItemClick.bind(this)} title={`Add`}/>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: `https://social-network.samuraijs.com/api/1.0/todo-lists/`,\n    withCredentials: true,\n    headers: {\"API-KEY\": \"326adc8b-48be-4905-a33d-14875af1c491\"}\n});\n\nexport const api = {\n    createTodoList(newTitle) {\n        return instance.post(``, {title: newTitle})\n    },\n    getTodoList() {\n        return instance.get(``)\n    },\n    getTasks(TodoListId) {\n        return instance.get(`${TodoListId}/tasks`)\n    },\n    createTasks(TodoListId, newTitle) {\n        return instance.post(`${TodoListId}/tasks`, {title: newTitle})\n    },\n    deleteTodoList(TodoListId) {\n        return instance.delete(`${TodoListId}`)\n    },\n    deleteTask(TodoListId, taskId) {\n        return instance.delete(`tasks/${taskId}`)\n    },\n    changeObjectAPI(objects) {\n        return instance.put(`tasks`, objects)\n    },\n    changeTodoListTitle(todolistId, title) {\n        return instance.put(`${todolistId}`, {title})\n    }\n};","import {api} from \"../API\";\n\nexport const SET_TODOLISTS = 'SET_TODOLISTS';\nexport const SET_TASKS = 'SET_TASKS';\nexport const ADD_TODOLIST = 'TodoList/Reduser/ADD_TODOLIST';\nexport const ADD_TASK = 'TodoList/Reduser/ADD_TASK';\nexport const DELETE_LIST_TASK = 'TodoList/Reduser/DELETE_LIST_TASK';\nexport const DELETE_TASK = 'TodoList/Reduser/DELETE_TASK';\nexport const CHANGE_OBJ = 'TodoList/Reduser/CHANGE_OBJ';\nexport const CHANGE_TODOLIST_TITLE = 'TodoList/Reduser/CHANGE_TODOLIST_TITLE';\n\nexport const setTodoLists = todoLists => ({type: SET_TODOLISTS, todoLists: todoLists});\nexport const setTasks = (tasks, todolistId) => ({type: SET_TASKS, todolistId: todolistId, tasks: tasks});\nexport const addTodoList = newTodoList => ({type: ADD_TODOLIST, newTodoList: newTodoList});\nexport const addTask = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\nexport const deleteListTask = (tasksId) => ({type: DELETE_LIST_TASK, tasksId: tasksId});\nexport const deleteTask = (todolistId, taskId) => ({type: DELETE_TASK, tasksId: todolistId, taskId: taskId});\nexport const changeObj = (tasksId, taskId, changeObj) => ({type: CHANGE_OBJ, tasksId, taskId, changeObj});\nexport const changeTodoListTitleAC = (todolistId, title) => ({type: CHANGE_TODOLIST_TITLE, todolistId, title});\n\n\nexport const addTodoListThunkCreator = (title) => dispatch => {\n    api.createTodoList(title).then(response => dispatch(addTodoList(response.data.data.item)))\n};\nexport const setTodoListsThunkCreator = () => dispatch => {\n    api.getTodoList().then(response => dispatch(setTodoLists(response.data)))\n};\nexport const addTaskThunkCreator = (newTask, todolistId) => dispatch => {\n    api.createTasks(todolistId, newTask).then(response => {\n        dispatch(addTask(response.data.data.item, todolistId));\n    })\n};\nexport const setTasksThunkCreator = (todolistId) => dispatch => {\n    api.getTasks(todolistId).then(response => {\n        dispatch(setTasks(response.data.items, todolistId));\n    })\n};\nexport const deleteListTaskThunkCreator = (todoListId) => dispatch => {\n    api.deleteTodoList(todoListId).then(response => {\n        dispatch(deleteListTask(todoListId))\n    })\n};\nexport const deleteTaskThunkCreator = (todolistId, taskId) => dispatch => {\n    api.deleteTask(todolistId, taskId).then(response => {\n        dispatch(deleteTask(todolistId, taskId));\n    })\n};\nexport const changeTodoListTitleACThunkCreator = (todolistId, title) => dispatch => {\n    api.changeTodoListTitle(todolistId, title).then(response => {\n        dispatch(changeTodoListTitleAC(todolistId, title));\n    })\n};\nexport const changeObjectThunkCreator = (todolistId, taskId, obj) => (dispatch, getState) => {\n    getState()\n        .todolists.find(item => item.id === todolistId)\n        .tasks.forEach(el => {\n        if (el.id === taskId) {\n            api.changeObjectAPI({...el, ...obj}).then(response => {\n                dispatch(changeObj(todolistId, taskId, obj))\n            })\n        }\n    });\n};\n\n\nconst initialState = {\n    todolists: [\n        // {\n        //     id: 0, title: \"sdfg\", tasks: [\n        //         {id: 0, title: \"afdg\", isDone: false, priority: \"low\"},\n        //         {id: 1, title: \"dfgdgd\", isDone: false, priority: \"low\"},\n        //         {id: 2, title: \"fg\", isDone: false, priority: \"low\"},\n        //     ]\n        // },\n        // {\n        //     id: 1, title: \"sd\", tasks: [\n        //         {id: 0, title: \"afdg\", isDone: false, priority: \"low\"},\n        //         {id: 1, title: \"dfgdgd\", isDone: false, priority: \"low\"},\n        //     ]\n        // },\n        // {\n        //     id: 2, title: \"fg\", tasks: [\n        //         {id: 0, title: \"afdg\", isDone: false, priority: \"low\"},\n        //     ]\n        // }\n    ],\n    buttonTitle: 'X',\n};\n\nconst ToDoListsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_TODOLISTS:\n            return {\n                ...state,\n                todolists: action.todoLists.map(item => ({...item, tasks: []})),\n            };\n        case SET_TASKS:\n            return {\n                ...state,\n                todolists: state.todolists.map(item => {\n                    if (item.id === action.todolistId) return {...item, tasks: action.tasks};\n                    else return item;\n                })\n            };\n        case ADD_TODOLIST: {\n            return {\n                ...state,\n                todolists: [action.newTodoList, ...state.todolists]\n            }\n        }\n        case ADD_TASK: {\n            return {\n                ...state,\n                todolists: state.todolists.map(item => {\n                    if (item.id === action.todolistId) return {...item, tasks: [action.newTask, ...item.tasks]};\n                    else return item;\n                })\n            }\n        }\n        case DELETE_LIST_TASK: {\n            return {\n                ...state,\n                todolists: state.todolists.filter(listTask => listTask.id !== action.tasksId),\n            }\n        }\n        case DELETE_TASK: {\n            return {\n                ...state,\n                todolists: state.todolists.map(item => {\n                    if (item.id === action.todolistId) return {\n                        ...item,\n                        tasks: item.tasks.filter(task => task.id !== action.taskId)\n                    };\n                })\n            }\n        }\n        case CHANGE_OBJ: {\n            return {\n                ...state,\n                todolists: state.todolists.map(item => {\n                    if (item.id === action.tasksId) return {\n                        ...item,\n                        tasks: item.tasks.map(task => {\n                            if (task.id === action.taskId) return {...task, ...action.changeObj};\n                            else return task;\n                        })\n                    };\n                    else return item;\n                })\n            }\n        }\n        case CHANGE_TODOLIST_TITLE: {\n            return {\n                ...state,\n                todolists: state.todolists.map(item => {\n                    if (item.id === action.todolistId) return {...item, title: action.title};\n                    else return item;\n                })\n            }\n        }\n        default:\n            return state;\n    }\n    return state;\n};\nexport default ToDoListsReducer;\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTask,\n    setTasks,\n    deleteListTask,\n    deleteTask,\n    changeObj,\n    changeTodoListTitleAC,\n    addTaskThunkCreator,\n    setTasksThunkCreator,\n    deleteListTaskThunkCreator,\n    deleteTaskThunkCreator,\n    changeObjectThunkCreator, changeTodoListTitleACThunkCreator\n} from \"./Redux/Reduser\";\nimport {api} from \"./API\";\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    // _restoreState = () => {\n    //     // объявляем наш стейт стартовый\n    //     let state = this.state;\n    //     // считываем сохранённую ранее строку из localStorage\n    //     let stateAsString = localStorage.getItem(\"our-state-\" + this.props.id);\n    //     // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n    //     // если не null, тогда превращаем строку в объект\n    //     if (stateAsString !== null) {\n    //         state = JSON.parse(stateAsString);\n    //     }\n    //     // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n    //     this.setState(state, () => {\n    //         this.state.tasks.forEach(t => {\n    //             if (t.id >= this.nextTaskId) {\n    //                 this.nextTaskId = t.id + 1;\n    //             }\n    //         })\n    //     });\n    // };\n\n    // _addTask = (newText) => {\n    //     let newTask = {\n    //         id: this.nextTaskId,\n    //         title: newText,\n    //         isDone: false,\n    //         priority: \"low\"\n    //     };\n    //     // инкрементим (увеличим) id следующей таски, чтобы при следюущем добавлении, он был на 1 больше\n    //     this.nextTaskId++;\n    //     // let newTasks = [...this.state.tasks, newTask];\n    //     // this.setState({\n    //     //     tasks: newTasks\n    //     // }, () => {\n    //     //     this.saveState();\n    //     // });\n    //     this.props.addTask(newTask, this.props.id);\n    //     console.log(newTask);\n    // };\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    };\n\n    nextTaskId = 0;\n    state = {\n        tasks: [],\n        filterValue: \"All\",\n        editMode: false,\n        todoListTitle: this.props.title\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue}, () => {\n            this.saveState();\n        });\n    };\n\n    restoreState = () => {\n        this.props.setTasksThunkCreator(this.props.id);\n        // api.getTasks(this.props.id).then(response => {\n        //     this.props.setTasks(response.data.items, this.props.id);\n        // })\n    };\n    addNewTask = (newText) => {\n        this.props.addTaskThunkCreator(newText, this.props.id);\n        // api.createTasks(this.props.id, newText).then(response => {\n        //     this.props.addTask(response.data.data.item, this.props.id);\n        // })\n    };\n    deleteListTask = (todoListId) => {\n        this.props.deleteListTaskThunkCreator(todoListId);\n        // api.deleteTodoList(todoListId).then(response => {\n        //     this.props.deleteListTask(todoListId)\n        // })\n    };\n    deleteTask = (todolistId, taskId) => {\n        this.props.deleteTaskThunkCreator(todolistId, taskId)\n        // api.deleteTask(todolistId, taskId).then(response => {\n        //     this.props.deleteTask(todolistId, taskId);\n        // })\n    };\n    changeTodoLIstTitle = (title) => {\n        this.props.changeTodoListTitleACThunkCreator(this.props.id, title)\n        // api.changeTodoListTitle(this.props.id, title).then(response => {\n        //     this.props.changeTodoListTitleAC(this.props.id, title);\n        // })\n    };\n\n    changeObjectAPI = (taskId, obj) => {\n        this.props.changeObjectThunkCreator(this.props.id, taskId, obj);\n        // let task = this.props.tasks.find(item => item.id === taskId);\n        // let newTask = {...task, ...object};\n        // api.changeObjectAPI(newTask).then(response => {\n        //     this.props.changeObject(this.props.id, taskId, newTask)\n        // })\n    };\n\n    changeTask = (taskId, obj) => this.changeObjectAPI(taskId, obj);\n    changeStatus = (taskId, isDone) => this.changeTask(taskId, {status: isDone});\n    changeTitle = (taskId, title) => this.changeTask(taskId, {title: title});\n\n    deactivateEditMode = () => this.setState({editMode: false});\n    activateEditMode = () => this.setState({editMode: true});\n\n    render = () => {\n\n        const {tasks = []} = this.props;\n\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title}\n                                   todolistId={this.props.id}\n                                   changeTodoLIstTitle={this.changeTodoLIstTitle}\n                                   deleteListTask={() => this.deleteListTask(this.props.id)}/>\n                    <AddNewItemForm addItem={this.addNewTask}/>\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               tasksId={this.props.id}\n                               deleteTask={this.deleteTask}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.status === 0;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.status === 2;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addTaskThunkCreator: (newTask, todolistId) => dispatch(addTaskThunkCreator(newTask, todolistId)),\n        setTasksThunkCreator: (todolistId) => dispatch(setTasksThunkCreator(todolistId)),\n        deleteListTaskThunkCreator: (todoListId) => dispatch(deleteListTaskThunkCreator(todoListId)),\n        deleteTaskThunkCreator: (todolistId, taskId) => dispatch(deleteTaskThunkCreator(todolistId, taskId)),\n        changeTodoListTitleACThunkCreator: (todolistId, title) => dispatch(changeTodoListTitleACThunkCreator(todolistId, title)),\n\n        changeObjectThunkCreator: (todolistId, taskId, obj) => dispatch(changeObjectThunkCreator(todolistId, taskId, obj)),\n    }\n};\n\nconst ConnectTodoList = connect(null, {\n    addTaskThunkCreator,\n    setTasksThunkCreator,\n    deleteListTaskThunkCreator,\n    deleteTaskThunkCreator,\n    changeTodoListTitleACThunkCreator,\n    changeObjectThunkCreator\n})(TodoList);\nexport default ConnectTodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodoListThunkCreator, setTodoListsThunkCreator} from \"./Redux/Reduser\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    nextTodoListId = 0;\n    state = {\n        todolists: []\n    };\n\n    addTodoList = (title) => {\n        this.props.addTodoListThunkCreator(title)\n        // api.createTodoList(title).then(response => this.props.addTodoList(response.data.data.item))\n    };\n    restoreState = () => {\n        this.props.setTodoListsThunkCreator();\n        // api.getTodoList().then(response => { this.props.setTodoLists(response.data) })\n    };\n\n    _addTodoList = (title) => {\n        let newTodoList = {\n            id: this.nextTodoListId,\n            title: title\n        };\n        // this.setState({todolists: [...this.state.todolists, newTodoList]}, () => {\n        //     this.saveState();\n        // });\n        // this.nextTodoListId++;\n    };\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    };\n    _restoreState = () => {\n        // объявляем наш стейт стартовый\n        let state = this.state;\n        // считываем сохранённую ранее строку из localStorage\n        let stateAsString = localStorage.getItem(\"todolists-state\");\n        // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n        // если не null, тогда превращаем строку в объект\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n        this.setState(state, () => {\n            this.state.todolists.forEach(t => {\n                if (t.id >= this.nextTodoListId) {\n                    this.nextTodoListId = t.id + 1;\n                }\n            })\n        });\n    };\n\n    render = () => {\n        let todolists = this.props.todolists.map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n\n        return (\n            <>\n                <div className={`center`}>\n                    <AddNewItemForm addItem={this.addTodoList.bind(this)}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({todolists: state.todolists});\nconst ConnectedApp = connect(mapStateToProps, {addTodoListThunkCreator, setTodoListsThunkCreator})(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport Reducer from './Reduser';\nimport thunkMiddleware from 'redux-thunk'\n\nconst store = createStore(Reducer, applyMiddleware(thunkMiddleware));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./Redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}